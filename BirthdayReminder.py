import telebot
import time
import pymysql.cursors
from telebot import types

print('@ElfochkaBirthdayReminderBot –∑–∞–ø—É—â–µ–Ω')

# Connect to the database


# with connection:
#     with connection.cursor() as cursor:
#         # Create a new record
#         sql = "INSERT INTO `BirthdayReminderBot` (`user_id`, `birthday_name`) VALUES (%s, %s)"
#         cursor.execute(sql, ('1111', 'very-secret'))
#
#     # connection is not autocommit by default. So you must commit to save
#     # your changes.
#     connection.commit()
#
#     with connection.cursor() as cursor:
#         # Read a single record
#         sql = "SELECT `user_id`, `birthday_name` FROM `BirthdayReminderBot` WHERE `user_id`=%s"
#         cursor.execute(sql, ('1111',))
#         result = cursor.fetchone()
#         print(result)


bot = telebot.TeleBot("5464014913:AAEW7TYzUvNurSjsIT4xwuwf7KOKogmODIQ")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

new_birthday_name = ''
new_birthday_date = ''
new_remind_or_not = False
new_reminder_period = 0


@bot.message_handler(content_types=['text'])
def start(message=''):
    # if message.text == '/start':
    #     my_text = ('@ElfochkaBirthdayReminderBot –∑–∞–ø—É—â–µ–Ω' + '\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(
    #         message.from_user.username) + '\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(message.from_user.id))
    #     bot.send_message(my_group_id, my_text,timeout=1000)

    if message.text == '/add':
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–º–µ–Ω–Ω–∏–∫–∞')
        bot.register_next_step_handler(message, birthday_name)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è birthday_name
    else:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏')


def birthday_name(message):
    global new_birthday_name
    if message.text != '':
        new_birthday_name = message.text
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 27.03')
        bot.register_next_step_handler(message, birthday_date)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è birthday_date
    else:
        bot.send_message(message.from_user.id, '–ò–º—è –∏–º–µ–Ω–Ω–∏–∫–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞')
        start(message)


def birthday_date(message):
    global new_birthday_date
    if message.text != '' and len(message.text) == 5 and str(message.text)[2] == '.':
        if str(message.text).split('.')[0].isdigit() and str(message.text).split('.')[1].isdigit():
            new_birthday_date = message.text
            # bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–∞—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ? –î–∞/–ù–µ—Ç')
            # bot.register_next_step_handler(message, remind_or_not)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è remind_or_not
        else:
            bot.send_message(message.from_user.id, '–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            bot.send_message(message.from_user.id,
                             '–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–ù–∞–ø–∏—à–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 27.03')
            birthday_date(message)

    # def remind_or_not(message):
    #     global new_remind_or_not
    #     if str(message.text).lower() == '–î–∞':
    #         new_remind_or_not = True
    #     bot.send_message(message.from_user.id, '–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
    #     bot.register_next_step_handler(message, reminder_period)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è birthday_date
    #
    #
    # def reminder_period(message):
    #     global new_reminder_period
    #     if int(message.text) > 0:
    #         new_reminder_period = int(message.text)
    #     else:

    keyboard = types.InlineKeyboardMarkup();  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
    keyboard.add(key_yes);  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no');
    keyboard.add(key_no);

    question = 'üë§: ' + new_birthday_name + '\nüìÜ: ' + new_birthday_date

    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏

        connection = pymysql.connect(host='31.31.198.35',
                                     user='u1771772_default',
                                     password='56f6hDDRxt96FSvu',
                                     database='u1771772_default',
                                     cursorclass=pymysql.cursors.DictCursor)

        with connection:
            with connection.cursor() as cursor:
                # Create a new record
                # sql = "INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)"
                sql = "INSERT INTO `BirthdayReminderBot` (`user_id`, `birthday_name`, `birthday_date`) VALUES (%s, %s, %s)"
                cursor.execute(sql, (
                    call.message.chat.id, new_birthday_name, new_birthday_date))

            # connection is not autocommit by default. So you must commit to save
            # your changes.
            connection.commit()

        bot.send_message(call.message.chat.id, '–Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª');
    elif call.data == "no":
        bot.send_message(call.from_user.id, '–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞')
        start()


# new_birthday_name = ''
# new_birthday_date = ''
# new_remind_or_not = False
# new_reminder_period = 0

# user_id +
# birthday_name +
# birthday_user_name -
# birthday_date +
# remind_or_not +
# reminder_period +
# chat_id
# text
# group_id
# user_name

# def get_new_record(message):
#     new_name = str(message.text).split('/')[0]
#     new_date = str(message.text).split('/')[1]
#
#     new_record = bot.send_message(message.from_user.id, ('üë§: ' + new_name + '\nüìÜ: ' + new_date))
#     new_record_id = new_record.id
#     new_record_text = new_record.text
#
#     print(new_record_id)
#     print(new_record_text)


if __name__ == '__main__':
    while True:
        try:  # –¥–æ–±–∞–≤–ª—è–µ–º try –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            bot.polling(none_stop=True)  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        except:
            time.sleep(10)  # –≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è
