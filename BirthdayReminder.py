import telebot
import time
import pymysql.cursors
from telebot import types
import datetime
import os
from dotenv import load_dotenv, find_dotenv

if not find_dotenv():
    exit('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç.–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env')
else:
    load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
HOST = os.getenv('HOST')
USER = os.getenv('USER')
PASSWORD = os.getenv('PASSWORD')
DATABASE = os.getenv('DATABASE')
MY_ID = os.getenv('MY_ID')

# bot = telebot.TeleBot("5407469548:AAHpPNs0W8_4DWOUP3gNm1wtIkKnACxp9iY")
# –¢–µ—Å—Ç–æ–≤—ã–π –ë–û–¢ Super Bot
bot = telebot.TeleBot(BOT_TOKEN)
# –†–∞–±–æ—á–∏–π BirthdayReminderBot

new_entry_id = ''
new_birthday_name = ''
new_birthday_date = ''
new_remind_or_not = False
new_reminder_period = 0
new_user_name = ''
user_id = ''

hello_message = '–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!'
help_message = '–í–≤–µ–¥–∏ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏\n' \
               '–í–≤–µ–¥–∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π'

error_message = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞.'

print('TeleBot - Done')


def my_log(log_text):
    try:
        with open('BirthdayReminderLog.txt', 'a') as file_log:
            time_stamp_now = time.strftime('%d.%m.%y %H:%M:%S', time.localtime())
            file_log.write(str(time_stamp_now) + ' : ' + log_text + '\n')

    except:
        pass


@bot.message_handler(content_types=['text'])
def start(message):
    global new_user_name, user_id
    if message.from_user.username:
        new_user_name = message.from_user.username
    user_id = message.from_user.id

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'start - Start')

    if message.text == '/add':
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å –∑–∞–ø–∏—Å—å: –ò–º—è –∏–º–µ–Ω–Ω–∏–∫–∞/–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –î–î.–ú–ú')
        # my_log(str(user_id) + ': @' + str(new_user_name) + ':' + '/add - Done')
        bot.register_next_step_handler(message, add_new_entry)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è add_new_entry
    elif message.text == '/list':
        user_id = message.from_user.id
        bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π:')
        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + '/list - Done')
        user_list(str(user_id))
    elif message.text == '/del':
        bot.send_message(message.from_user.id, '–°–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–ø–∏–∫–∞ –∏ –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä id –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.')
        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + '/del - Start')
        bot.register_next_step_handler(message, del_entry)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è del_entry
    elif message.text == '/edit':
        bot.send_message(message.from_user.id, '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç —Å–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–ø–∏–∫–∞ –∏ –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä id '
                                               '–∑–∞–ø–∏—Å–∏ –∏ id —á–∞—Ç–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ id_–∑–∞–ø–∏—Å–∏/id—á–∞—Ç–∞1, id—á–∞—Ç–∞2, id—á–∞—Ç–∞3\n'
                                               '–ù–∞–ø—Ä–∏–º–µ—Ä: 0001/-2000000001')
        bot.send_message(message.from_user.id, '–µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ id —á–∞—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /getid')
        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + '/edit - Start')
        bot.register_next_step_handler(message, edit_entry)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è edit_entry
    elif message.text == '/getid':
        bot.send_message(message.from_user.id, '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∏–ª–∏ —á–∞—Ç–∞, ID –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å'
                                               '(–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞, —Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–π –∏–º–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, '
                                               '–Ω–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + '/getid - Start')

        bot.register_next_step_handler(message, get_chat_id)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_chat_id

    else:
        bot.send_message(message.from_user.id, help_message)

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'start - Done')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
def add_new_entry(message):
    global new_birthday_name, new_birthday_date, new_remind_or_not, new_reminder_period, new_user_name

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'add_new_entry - Start')

    try:
        if '/' not in str(message.text):
            bot.send_message(message.from_user.id, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "/" –º–µ–∂–¥—É –∏–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π')
            raise ZeroDivisionError

        new_entry = str(message.text).split('/')
        new_birthday_name = new_entry[0]
        new_birthday_date = new_entry[1]

        if new_birthday_name == '':
            if new_birthday_date.isalpha():
                raise IndexError
            else:
                bot.send_message(message.from_user.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
                raise ZeroDivisionError
        elif '.' not in new_birthday_date:
            bot.send_message(message.from_user.id, '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, —Å–Ω–∞—á–∞–ª–∞ –¥–µ–Ω—å, '
                                                   '–∑–∞—Ç–µ–º –º–µ—Å—è—Ü. –ù–∞–ø—Ä–∏–º–µ—Ä "31.12" - 31–µ –î–µ–∫–∞–±—Ä—è')
            raise ZeroDivisionError

        ddmm = str(new_birthday_date).split('.')
        dd = ddmm[0]
        mm = ddmm[1]

        if len(dd) != 2 or len(mm) != 2:
            bot.send_message(message.from_user.id, '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–∏–¥ "–î–î.–ú–ú" –≤ –¥–Ω—è—Ö –∏ –º–µ—Å—è—Ü–µ –ø–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã, '
                                                   '–Ω–∞–ø—Ä–∏–º–µ—Ä: "03.03" (3–µ –º–∞—Ä—Ç–∞)')
            raise ZeroDivisionError

        elif int(dd) > 31 or int(mm) > 12:
            bot.send_message(message.from_user.id,
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É. –î–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 31, –∞ –º–µ—Å—è—Ü –Ω–µ –±–æ–ª—å—à–µ 12')
            raise ZeroDivisionError

        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'add_new_entry - Processing')

        keyboard = types.InlineKeyboardMarkup();  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        key_yes = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å', callback_data='yes')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
        keyboard.add(key_yes);  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        key_no = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='no');
        keyboard.add(key_no);

        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'keyboard - Done')

        question = 'üë§: ' + new_birthday_name + '\nüìÜ: ' + new_birthday_date

        bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)

    except ZeroDivisionError:
        bot.send_message(message.from_user.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ –ò–º—è –∏–º–µ–Ω–Ω–∏–∫–∞/–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –î–î.–ú–ú')
        bot.register_next_step_handler(message, add_new_entry)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è add_new_entry

    except:
        bot.send_message(message.from_user.id, error_message)
        bot.send_message(message.from_user.id, help_message)

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'add_new_entry - PreDone')


# –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π —é–∑–µ—Ä–∞
def user_list(list_user_id):
    connection_list = pymysql.connect(host=HOST,
                                      user=USER,
                                      password=PASSWORD,
                                      database=DATABASE,
                                      cursorclass=pymysql.cursors.DictCursor)

    global user_id, new_user_name
    user_id = list_user_id
    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'user_list - Start')

    try:
        with connection_list:

            with connection_list.cursor() as cursor_list:
                sql_list = "SELECT * FROM `BirthdayReminderBot` WHERE `user_id`=%s"
                cursor_list.execute(sql_list, (str(user_id),))
                result = cursor_list.fetchall()

                for line in result:

                    chat_id_text = ''

                    if str(line['chat_id']) != '':
                        chat_id_text = '\nüí¨: ' + str(line['chat_id'])

                    list_line = 'üÜî: `' + str(line['id']) + '`\n' + 'üë§: *' + str(
                        line['birthday_name']) + '*\nüìÜ: ' + str(line['birthday_date']) + str(chat_id_text)

                    bot.send_message(user_id, list_line, parse_mode='MarkDown')
        bot.send_message(user_id, '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /del\n'
                                  '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /edit')

    except:
        bot.send_message(user_id, error_message)

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'user_list - Done')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –î–†
def remind_congratulate():
    # my_log('remind_congratulate - Start')
    connection_remind_congratulate = pymysql.connect(host=HOST,
                                                     user=USER,
                                                     password=PASSWORD,
                                                     database=DATABASE,
                                                     cursorclass=pymysql.cursors.DictCursor)

    now_date = time.strftime('%d.%m', time.localtime())
    bot.send_message(MY_ID, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ {}'.format(now_date), parse_mode='MarkDown')

    with connection_remind_congratulate:
        with connection_remind_congratulate.cursor() as cursor_remind_congratulate:
            sql = "SELECT * FROM `BirthdayReminderBot` WHERE `birthday_date`=%s"
            cursor_remind_congratulate.execute(sql, (str(now_date),))
            result = cursor_remind_congratulate.fetchall()
            # print('Done1')
            # my_log('remind_congratulate - result - Done')
            for line in result:
                # my_log('remind_congratulate - ' + now_date + ' - Done')
                # print('Done2')
                try:
                    # today_date = '–°–µ–≥–æ–¥–Ω—è '

                    today_date = '–°–µ–≥–æ–¥–Ω—è ' + line['birthday_date'] + ' –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è *' + line[
                        'birthday_name'] + '*'

                    # print('Done3.1')
                    congratulate_text = '*' + line['birthday_name'] + '*, —Å –¥–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è!'
                    # print('Done3.2')
                    bot.send_message(line['user_id'], today_date, parse_mode='MarkDown')
                    # print('Done3.3')
                    if line['chat_id'] != '0' or line['chat_id'] != '':
                        # print('re')
                        for chat_id in str(line['chat_id']).split(', '):
                            # print(int(chat_id))
                            bot.send_message(int(chat_id), congratulate_text, parse_mode='MarkDown')
                except:
                    pass

        remind_period = [1, 3, 7]

        for i in remind_period:
            date_reminder = datetime.datetime.today() + datetime.timedelta(days=i)
            date_reminder = date_reminder.strftime('%d.%m')

            with connection_remind_congratulate.cursor() as cursor_remind_before:
                sql = "SELECT * FROM `BirthdayReminderBot` WHERE `birthday_date`=%s"
                cursor_remind_before.execute(sql, (str(date_reminder),))
                result = cursor_remind_before.fetchall()

                # my_log('cursor_remind_before - result - Done')
                for line in result:
                    # my_log('cursor_remind_before - ' + now_date + ' - Done')

                    congratulate_text = '–ù–µ –∑–∞–±—É–¥—å, ' + line['birthday_date'] + ' –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è *' + line[
                        'birthday_name'] + '*'

                    bot.send_message(line['user_id'], congratulate_text, parse_mode='MarkDown')

    time.sleep(100)


# —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id
def del_entry(message):
    global user_id, new_user_name

    user_id = message.from_user.id

    connection_del_entry = pymysql.connect(host=HOST,
                                           user=USER,
                                           password=PASSWORD,
                                           database=DATABASE,
                                           cursorclass=pymysql.cursors.DictCursor)
    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'del_entry - connection - Done')

    try:

        if '/' in str(message.text) and str(message.text).split('/')[1].isalpha():
            raise BaseException

        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'del_entry - connection - try')

        with connection_del_entry:

            # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'del_entry - connection - connection_del_entry')

            with connection_del_entry.cursor() as cursor_del_entry:
                # my_log(
                #     str(user_id) + ': @' + str(
                #         new_user_name) + ': ' + 'del_entry - connection - '
                #                                 'with connection_del_entry.cursor() as cursor_del_entry' + message.text)

                sql_del = "DELETE FROM `BirthdayReminderBot` WHERE `id`=%s AND `user_id`=%s"
                cursor_del_entry.execute(sql_del, (message.text, user_id))

                # my_log(str(user_id) + ': @' + str(
                #     new_user_name) + ': ' + 'del_entry - cursor_del_entry - Done ' + str(message.text) + ' : ' + str(
                #     message.from_user.id))

            connection_del_entry.commit()

            # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'del_entry - Done')
            bot.send_message(message.from_user.id, '–£–¥–∞–ª–∏–ª –∑–∞–ø–∏—Å—å')

            user_list(str(user_id))

    except:
        bot.send_message(user_id, error_message)
        bot.send_message(user_id, help_message)


# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id
def edit_entry(message):
    global user_id, new_user_name

    user_id = message.from_user.id
    message_text = str(message.text).split('/')

    connection_edit_entry = pymysql.connect(host=HOST,
                                            user=USER,
                                            password=PASSWORD,
                                            database=DATABASE,
                                            cursorclass=pymysql.cursors.DictCursor)
    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'edit_entry - connection - Done')

    try:

        if '/' in str(message.text) and str(message.text).split('/')[1].isalpha():
            raise BaseException

        # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'edit_entry - connection - try')

        with connection_edit_entry:

            # my_log(
            #     str(user_id) + ': @' + str(new_user_name) + ': ' + 'edit_entry - connection - connection_edit_entry')

            with connection_edit_entry.cursor() as cursor_edit_entry:
                # my_log(
                #     str(user_id) + ': @' + str(
                #         new_user_name) + ': ' + 'edit_entry - connection - '
                #                                 'with connection_edit_entry.cursor() as cursor_edit_entry' + message.text)

                sql_edit = "UPDATE `BirthdayReminderBot` SET `chat_id` = %s WHERE `id` = %s"
                cursor_edit_entry.execute(sql_edit, (message_text[1], message_text[0]))

            connection_edit_entry.commit()

            # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'edit_entry - Done')
            bot.send_message(message.from_user.id, '–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –∑–∞–ø–∏—Å—å')

            user_list(str(user_id))

    except:
        bot.send_message(user_id, error_message)
        bot.send_message(user_id, help_message)


def get_chat_id(message):
    print(message)
    get_chat_id_message = '–í–∞—à id: `' + str(message.from_user.id) + '`\n–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç *' + str(
        message.forward_from_chat.title) + '*, id: `' + str(
        message.forward_from_chat.id) + '`'

    bot.send_message(message.from_user.id, get_chat_id_message, parse_mode='MarkDown')


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    connection_add = pymysql.connect(host=HOST,
                                     user=USER,
                                     password=PASSWORD,
                                     database=DATABASE,
                                     cursorclass=pymysql.cursors.DictCursor)

    global new_birthday_name, new_birthday_date, new_user_name, user_id

    # if new_user_name == '':
    #     new_user_name = ''
    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'callback_worker - Start')

    if call.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        if new_user_name != '' or new_birthday_name != '' or new_birthday_date != '':

            with connection_add:
                with connection_add.cursor() as cursor_add:
                    sql_add = "INSERT INTO `BirthdayReminderBot` (`user_id`, `birthday_name`, `birthday_date`, `user_name`) VALUES (%s, %s, %s, %s)"
                    cursor_add.execute(sql_add, (
                        call.message.chat.id, new_birthday_name, new_birthday_date,
                        ('@' + new_user_name)))

                    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'cursor_add.execute - Done')

                connection_add.commit()

                # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'connection.commit() - Done')

            new_user_name, new_birthday_name, new_birthday_date = '', '', ''

            bot.send_message(call.message.chat.id, '–Ø –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏–ª!')

        else:
            new_user_name, new_birthday_name, new_birthday_date = '', '', ''
            bot.send_message(call.message.chat.id, error_message)

    elif call.data == "no":
        if new_user_name != '' or new_birthday_name != '' or new_birthday_date != '':
            bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–∏–ª.')
            bot.send_message(call.message.chat.id, help_message)

    # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'callback_worker - Done')


if __name__ == '__main__':

    while True:
        try:  # –¥–æ–±–∞–≤–ª—è–µ–º try –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            bot.polling(none_stop=True)  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        except:
            # my_log(str(user_id) + ': @' + str(new_user_name) + ': ' + 'Global except time.sleep(15) - Done')
            time.sleep(15)  # –≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è
